# Nginx reverse proxy terminating TLS for consule.cloud
# - Serves ACME HTTP-01 challenges from /var/www/certbot
# - Redirects HTTP->HTTPS
# - Proxies HTTPS to the internal frontend container on http://frontend:80

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  server_tokens off;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;
  keepalive_timeout  65;

  # Gzip for text assets
  gzip on;
  gzip_comp_level 5;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;
  gzip_types
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/ttf
    image/svg+xml
    text/css
    text/plain;

  # Upstream to the internal frontend container
  upstream frontend_upstream {
    server frontend:80;
    keepalive 32;
  }

  # HTTP server: ACME challenges + redirect to HTTPS
  server {
    listen 80;
    listen [::]:80;
    server_name consule.cloud;

    # Serve ACME HTTP-01 challenges from mounted webroot
    location ^~ /.well-known/acme-challenge/ {
      root /var/www/certbot;
      default_type text/plain;
      access_log off;
    }

    # Everything else redirect to HTTPS
    location / {
      return 301 https://$host$request_uri;
    }
  }

  # HTTPS server: terminate TLS and proxy to frontend
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name consule.cloud;

    # Paths to certificates mounted from the host's /etc/letsencrypt
    ssl_certificate     /etc/letsencrypt/live/consule.cloud/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/consule.cloud/privkey.pem;

    # Reasonable TLS params (nginx:alpine ships with modern OpenSSL)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_buffer_size 8k;

    # HSTS: enable only if you are sure HTTPS works across the site
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Proxy to the SPA container
    location / {
      proxy_pass http://frontend_upstream;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_read_timeout 60s;
    }

    # Healthcheck for the proxy itself
    location = /proxy-healthz {
      access_log off;
      add_header Content-Type text/plain;
      return 200 'ok';
    }
  }
}
